source("exemplo_REPAIR_works.R")
source("Optim.R")
source("Optim.R")
source("Optim.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("exemplo_REPAIR_works.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("demo-2-hill.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("demo-2-hill.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("demo-2-hill.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Optim.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Optim.R")
source("demo-3-montecarlo.R.R")
source("demo-3-montecarlo.R")
source("Optim.R")
source("Optim.R")
source("Optim.R")
source("Hill_climbing_proj.R")
source("Optim.R")
source("Hill_climbing_proj.R")
source("exemplo_EVAL_works.R.R")
source("exemplo_EVAL_works.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("exemplo_EVAL_works.R")
source("Optim.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
print(n_func_max)
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Monte_carlo_blind.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("demo-4-sann.R")
source("sann_proj.R")
source("sann_proj.R")
source("demo-4-sann.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
View(bebidas)
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("4-+R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
shiny::runApp()
output$output13 <- renderText({
paste("Saída 13 para a semana", semana())
})
paste("Saída 10 para a semana", semana())
runApp()
shiny::runApp()
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
View(bebidas)
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("Bivariada.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
2
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
source("ML.R")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source("Vendas_previstas_st_bud_app.R")
source("Vendas_previstas_st_bud_app.R")
source("Vendas_previstas_st_bud_app.R")
source("Vendas_previstas_st_bud_app.R")
source("Vendas_previstas_st_bud_app.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
source("ML_RW.R")
source("Vendas_previstas_st_bud_app.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("ML_RW.R")
source("ML_RW.R")
runApp()
runApp()
semana_selecionada_ML_RW <- function (SemanaSelecionada) {
#STEELLA - MELHOR MÉTODO MLPE
##Enviar as vendas previstas Stella e bud consoante semana
# 4-passengers.R: script demonstration of growing window and rolling window evaluations.
library(forecast) # access forecast functions -> HoltWinters, forecast
library(rminer) # access rminer functions -> CasesSeries, fit, lforecast, mmetric, mgraph, ...
library(readxl)
# setwd() # adjust working directory if needed.
# read data:
bebidas <- read_excel("C:/Users/Miguel Rebelo/Desktop/TIAPOSE/Otimização/bebidas.xlsx")
TS <- ts(bebidas[,5])
d1=TS # vector of numeric
L=length(d1) # size of the time series, 144
K=7# assumption for the seasonal period: test also acf(d1S)
Test=(7*SemanaSelecionada) # H, the number of multi-ahead steps, adjust if needed
S=round(K/7) # K/3 step jump: set in this case to 4 months, a quarter
Runs=20 # number of growing window iterations, adjust if needed -
# forecast:
W=(L-Test)-(Runs-1)*S # initial training window size for the ts space (forecast methods)
# rminer:
timelags=c(1:7) # 1 previous month, 12 and 13 previous year months, you can test other combinations, such as 1:13
D=CasesSeries(d1,timelags) # note: nrow(D) is smaller by max timelags than length(d1)
W2=W-max(timelags) # initial training window size for the D space (CasesSeries, rminer methods)
YR=diff(range(d1)) # global Y range, use the same range for the NMAE calculation in all iterations
# rolling window:
for(b in 1:Runs)  # cycle of the incremental window training (growing window)
{
# code for rminer package methods, "mlpe" is just an example:
H2=holdout(D$y,ratio=Test,mode="incremental",iter=b,window=W2,increment=S)
# note: the last training value is the same for dtr, namely:
# print(dtr[length(dtr)])
# print(D[H2$tr[length(H2$tr)],]) # y is equal to previously shown value
M2=fit(y~.,D[H2$tr,],"mlpe") # create forecasting model
Pred2=lforecast(M2,D,start=(length(H2$tr)+1),Test) # multi-step ahead forecasts
ev2[b]=mmetric(y=d1[H$ts],x=Pred2,metric="NMAE",val=YR)
} # end of cycle
#Mostar semana/dias previstos - esta a prever para a ultima semana
predicted_dates <- vector(length = K)
for(b in 1:Test) {
predicted_dates[b] <- as.character(bebidas$DATA[H2$ts[b]])
}
predicted_dates <- predicted_dates[1:7]
return(predicted_dates)
}
predicted_dates <- predicted_dates[1:7]
runApp()
shiny::runApp()
runApp()
runApp()
source("ML_RW.R")
runApp()
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
1
1
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
source("ML_RW.R")
runApp()
source("ML_RW.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Monte_carlo_blind.R")
source("Hill_climbing_proj.RR")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("Hill_climbing_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
source("sann_proj.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(predicted_sales_stella)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
